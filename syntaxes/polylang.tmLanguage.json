{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Polylang",
	"patterns": [
		{"include": "#comment"},
		{"include": "#control"},
		{"include": "#declaration"},
		{"include": "#operator"},
		{"include": "#primitive"},
		{"include": "#type"},
		{"include": "#constant"}
	],
	"repository": {
		"comment": {
			"patterns": [
				{"include": "#comment-block"},
				{"include": "#comment-line"}
			]
		},
		"comment-block": {
			"name": "comment.block.documentation.polylang",
			"begin": "(\\/\\*)",
			"beginCaptures": {
				"1": {"name": "punctuation.definition.comment.polylang"}
			},
			"end": "(\\*\\/)",
			"endCaptures": {
				"1": {"name": "punctuation.definition.comment.polylang"}
			}
		},
		"comment-line": {
			"name": "comment.line.double-slash.polylang",
			"begin": "(\\/\\/)",
			"beginCaptures": {
				"1": {"name": "punctuation.definition.comment.polylang"}
			},
			"end": "(?:\\n|$)"
		},
		"control": {
			"patterns": [
				{"include": "#control-flow"}
			]
		},
		"control-flow": {
			"match": "\\b(if|else|let|for|while|break|continue|throw|return)\\b",
			"name": "keyword.control.flow.polylang"
		},
		"declaration": {
			"patterns": [
				{"include": "#declaration-collection"},
				{"include": "#declaration-function"},
				{"include": "#declaration-error"},
				{"include": "#declaration-call"},
				{"include": "#declaration-index"}
			]
		},
		"declaration-collection": {
			"match": "\\b(collection)(?:\\s+([A-Za-z]\\w+))\\b",
			"captures": {
				"1": {"name": "keyword.other.collection.polylang"},
				"2": {"name": "entity.name.type.collection.polylang"}
			}
		},
		"declaration-function": {
			"match": "\\b(function)\\s+(\\w+)\\b",
			"captures": {
				"1": {"name": "storage.type.function.polylang"},
				"2": {"name": "entity.name.function.polylang"}
			}
		},
		"declaration-error": {
			"match": "\\b(error)(\\s+([A-Za-z_]\\w*))?\\b",
			"name": "storage.type.error.polylang"
		},
		"declaration-call": {
			"match": "\\b([A-Za-z_]\\w*)\\s*(\\()",
			"name": "entity.name.function.call.polylang"
		},
		"declaration-index": {
			"match": "@index\\b",
			"name": "keyword.control.index.polylang"
		},
		"operator": {
			"patterns": [
				{"include": "#operator-binary"},
				{"include": "#operator-logic"},
				{"include": "#operator-assignment"},
				{"include": "#operator-arithmetic"}
			]
		},
        "operator-logic": {
            "match": "(\\!=|\\!|<|>|<=|>=|==|\\&\\&|\\|\\|)",
            "name": "keyword.operator.logic.polylang"
        },
		"operator-arithmetic": {
            "match": "(\\*|\\/|\\%|\\+|\\-)",
            "name": "keyword.operator.arithmetic.polylang"
		},
        "operator-assignment": {
            "match": "(\\=|\\-\\=|\\+\\=)",
            "name": "keyword.operator.assignment.polylang"
        },
        "operator-binary": {
            "match": "(~|\\*\\*|\\<\\<|\\>\\>|\\&|\\^|\\|)",
            "name": "keyword.operator.binary.polylang"
        },
		"primitive": {
			"patterns": [
				{"include": "#number"},
				{"include": "#string"}
			]
		},
		"number": {
			"match": "\\b([0-9_]+(\\.[0-9_]+)?)\\b",
			"name": "constant.numeric.polylang"
		},
		"string": {
			"patterns": [
				{
					"match": "\\\".*?\\\"",
					"name": "string.quoted.double.polylang"
				},
				{
					"match": "\\'.*?\\'",
					"name": "string.quoted.single.polylang"
				}
			]
		},
		"type": {
			"match": "\\b(string|number|boolean|record|map)\\b",
			"name": "support.type.primitive.polylang"
		},
		"constant": {
			"patterns": [
				{"include": "#constant-order"},
				{"include": "#constant-boolean"}
			]
		},
		"constant-order": {
			"match": "\\b(asc|desc)\\b",
			"name": "constant.language.order.polylang"
		},
		"constant-boolean": {
			"match": "\\b(true|false)\\b",
			"name": "constant.language.boolean.polylang"
		}
	},
	"scopeName": "source.polylang"
}
